buildscript {
  dependencies {
    // specify your JDBC driver
    classpath 'com.h2database:h2:2.1.214'
  }
}

plugins {
  id 'java'
  id 'org.springframework.boot' version '2.7.5'
  id 'io.spring.dependency-management' version '1.0.15.RELEASE'
  id 'org.domaframework.doma.codegen' version '2.0.0'
  id 'com.diffplug.spotless' version '6.11.0'
  // id 'com.diffplug.eclipse.apt' version '3.39.0'
}

apply plugin: "groovy"
apply plugin: 'org.domaframework.doma.codegen'

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
  implementation 'org.springframework.boot:spring-boot-starter-jdbc'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  compileOnly 'org.projectlombok:lombok'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  runtimeOnly 'com.h2database:h2:2.1.214'
  annotationProcessor 'org.projectlombok:lombok'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation("org.junit.vintage:junit-vintage-engine") {
    exclude group: "org.hamcrest", module: "hamcrest-core"
  }
  implementation 'org.flywaydb:flyway-core:9.8.1'

  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.boot:spring-boot-starter-aop'
  implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.hibernate:hibernate-validator:8.0.0.Final'
  implementation 'org.seasar.doma.boot:doma-spring-boot-starter:1.6.0'
  implementation 'org.seasar.doma:doma-core:2.53.1'
  annotationProcessor 'org.seasar.doma:doma-processor:2.53.1'
  testImplementation 'junit:junit:4.13.2'
  testImplementation 'org.springframework.security:spring-security-test'
  testImplementation 'com.btmatthews.junit:junit-rules:1.0.1'
}

tasks.named('test') {
  useJUnitPlatform()
  testLogging {
    events "PASSED", "SKIPPED", "FAILED"
    exceptionFormat 'full'
    debug {
      events "STARTED", "PASSED", "SKIPPED", "FAILED"
      showStandardStreams = true
    }
  }
}

spotless {
  java {
    googleJavaFormat()
  }
  groovyGradle {
    target '*.gradle', '*/*.gradle'
    greclipse().configFile("$rootDir/greclipse.properties")
  }
}

compileJava.dependsOn 'spotlessJavaApply'

// https://doma.readthedocs.io/en/2.20.0/build/
// テンポラリディレクトリのパスを定義する
ext.domaResourcesDir = "${buildDir}/tmp/doma-resources"

// domaが注釈処理で参照するリソースをテンポラリディレクトリに抽出
task extractDomaResources(type: Copy, dependsOn: processResources)  {
  from processResources.destinationDir
  include 'doma.compile.config'
  include 'META-INF/**/*.sql'
  include 'META-INF/**/*.script'
  into domaResourcesDir
}

// テンポラリディレクトリ内のリソースをcompileJavaタスクの出力先ディレクトリにコピーする
task copyDomaResources(type: Copy, dependsOn: extractDomaResources)  {
  from domaResourcesDir
  into compileJava.destinationDir
}

compileJava {
  // 上述のタスクに依存させる
  dependsOn copyDomaResources
  // テンポラリディレクトリをcompileJavaタスクの入力ディレクトリに設定する
  inputs.dir domaResourcesDir
  options.encoding = 'UTF-8'
}

compileTestJava {
  options.encoding = 'UTF-8'
  // テストの実行時は注釈処理を無効にする
  options.compilerArgs = ['-proc:none']
}

// https://plugins.gradle.org/plugin/org.domaframework.doma.codegen
domaCodeGen {
  // make an arbitrary named block
  dev {
    // JDBC url
    url = "jdbc:h2:file:$projectDir/work/db/db;MODE=MySQL"
    // JDBC user
    user = ''
    // JDBC password
    password = ''
    tableNamePattern = '^m.*'
    // configuration for generated entity source files
    entity {
      packageName = 'org.example.entity'
    }
    // configuration for generated DAO source files
    dao {
      packageName = 'org.example.dao'
    }
  }
}

// eclipse {
//   jdt {
//     apt {
//       genSrcDir = file('src-gen/main/java')
//       genTestSrcDir = file('src-gen/test/java')
//     }
//   }
// }

// task _copySqls(type: Copy) {
//   from 'src/main/resources/META-INF'
//   into 'bin/default/META-INF'
// }

task copyToBin(type: Copy) {
  dependsOn compileJava
  from 'build/classes/java/main'
  into 'bin/main'
}
